import esbuild from "esbuild";
import inlineImportPlugin from "esbuild-plugin-inline-import";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import os from "os";
import dotenv from "dotenv";

// Load .env file
dotenv.config();

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

// Get the test vault plugin directory path from .env file
// If the environment variable doesn't exist, use the default path
const testVaultPluginDir = process.env.TEST_VAULT_PLUGIN_DIR
	? process.env.TEST_VAULT_PLUGIN_DIR.replace(/^~/, os.homedir())
	: path.join(
		os.homedir(),
		"SynologyDrive/AppDataSync/testvault/.obsidian/plugins/obsidian-external-file-embed-and-link"
	);

// Function to copy files to the test vault
const copyToTestVault = (srcFile, destDir) => {
	if (!fs.existsSync(destDir)) {
		console.log(`Target directory does not exist: ${destDir}`);
		return;
	}
	
	const fileName = path.basename(srcFile);
	const destFile = path.join(destDir, fileName);
	
	try {
		fs.copyFileSync(srcFile, destFile);
		console.log(`Copied ${fileName} to ${destDir}`);
	} catch (err) {
		console.error(`Failed to copy file: ${err}`);
	}
};

// Watch for CSS file changes
const watchCssFile = () => {
	const cssFile = path.resolve("styles.css");
	if (fs.existsSync(cssFile)) {
		fs.watchFile(cssFile, { interval: 100 }, () => {
			console.log("styles.css has been modified");
			copyToTestVault(cssFile, testVaultPluginDir);
		});
		console.log("Watching for changes in styles.css");
	}
};

// Create a plugin to handle file copying after each build
const copyFilesPlugin = {
	name: 'copy-files-plugin',
	setup(build) {
		build.onEnd(result => {
			if (result.errors.length === 0) {
				const mainJsFile = path.resolve("main.js");
				copyToTestVault(mainJsFile, testVaultPluginDir);
			}
		});
	},
};

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	plugins: [
		// Always include this plugin before others
		inlineImportPlugin({
			baseDir: process.cwd(),
			filter: /^inline:/,
			transform: (content) => content
		}),
		// Add the custom plugin to copy files after build
		copyFilesPlugin
	],
	minify: prod,
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
	
	// Watch for CSS file changes
	watchCssFile();
	
	console.log(`Development mode: Files will be automatically copied to test vault directory [${testVaultPluginDir}]`);
}
